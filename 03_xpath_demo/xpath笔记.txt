# xpath语法

# 使用方式：
    使用//获取整个页面当中的元素，然后写标签名，然后再写谓词进行提取
    代码示例：
    //div[@class="abc"]

# 需要注意的知识点
    1./和//的区别:
        / 代表只获取子节点 // 获取子孙节点
    2.contains：有时候某个属性中包含了多个值，可以使用contains函数，
    代码示例:
        //div[contains(@class,"job_detail")]
    3.谓词中的下标是从1开始的，不是从0开始

# 使用lxml解析html代码
    1.解析html字符串，使用lxml.etree.HTML进行解析
    示例代码:
        from lxml import etree
        html = etree.HTML(text)
        print(etree.tostring(html,encoding="utf-8").decode("utf-8"))
    2.解析html文件，使用lxml.etree.parse进行解析，这个函数默认使用的是xml
    示例代码:
        html = etree.parse("tencent.html")
        print(etree.tostring(html, encoding="utf-8").decode("utf-8"))
    如果遇到的是一些不规范的HTML代码就会解析错误，这时就需要创建HTML解析器
    示例代码:
        parser = etree.HTMLParser(encoding="utf-8")
        html = etree.parse("lagou.html", parser=parser)
        print(etree.tostring(html, encoding="utf-8").decode("utf-8"))

# lxml结合xpath注意事项
    1.使用xpath语法。应该使用Element.xpath() 来执行xpath的选择
    示例代码:
        ps = html.xpath("//p[position()<2]")
    2.获取某个标签的属性
    示例代码:
        href = html.xpath("//p/@href") # 获取a标签的href属性对应的值
    3.获取文本，是通过xpath中的text()函数
    示例代码:
        company = p.xpath("./span[1]/text()")[0]
    4.在某个标签下再执行xpath函数，获取这个标签下的子孙元素,
        不能使用//xxx  而是使用.//xxx  代表当前标签下的元素
    示例代码:
        company = p.xpath("./span[1]/text()")[0]